components:
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          format: email
          unique: true
          description: User's email address, used for login
        age:
          type: number
          description: User's age
        password:
          type: string
          description: User's password
        cart:
          type: string
          format: objectId
          description: Reference to the user's shopping cart
        role:
          type: string
          description: User's role (default user)
          default: user  
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
      required:
        - email
        - password
      example:
        first_name: "Juan"
        last_name: "Burro"
        email: "juanburro@example.com"
        age: 30
        password: "password123"
        cart: "60d21b4667d0d8992e610c85"
        role: "user"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: tokenCookie
      description: JWT token stored in cookies for authentication.
  requestBodies:
    Login:
      description: Credentials required for user authentication.
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: "juanburro@example.com"
              password:
                type: string
                example: "password123"
            required:
              - email
              - password
paths:
  /api/sessions/registro:
    post:
      summary: Register a new user in the database, including password hashing.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: User successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successful registration"
                  newUser:
                    $ref: '#/components/schemas/User'
        "400":
          description: Bad request, missing or invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User registration failed"

  /api/sessions/login:
    post:
      summary: Log in a previously registered user and store the token in a cookie.
      tags:
        - Authentication
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        "200":
          description: Login successful, returns a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successful login"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"

  /api/sessions/current:
    get:
      summary: Retrieve the current logged-in user's information.
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Successfully retrieved user information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User information successfully retrieved"
                  user:
                    $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized, user is not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not authenticated"

  /api/sessions/logout:
    get:
      summary: Log out the current user and end the session.
      tags:
        - Authentication
      responses:
        "200":
          description: Logout successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        "401":
          description: No active session to log out.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No active session found"

  /api/sessions/github:
    get:
      summary: Authenticate the user using GitHub and return user information.
      tags:
        - Authentication
      responses:
        "200":
          description: GitHub authentication successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "GitHub authentication successful"
                  user:
                    $ref: '#/components/schemas/User'
        "401":
          description: GitHub authentication failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "GitHub authentication failed"
