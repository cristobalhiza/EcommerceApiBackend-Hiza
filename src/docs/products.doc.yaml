components:
  schemas:
    Product:
      type: object
      properties:
        code:
          type: string
          description: Unique code of the product
        title:
          type: string
          description: Title of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          format: float
          description: Price of the product
        category:
          type: string
          description: Category of the product
        stock:
          type: number
          description: Stock quantity of the product
        status:
          type: boolean
          description: Status of the product (active or inactive)
        thumbnail:
          type: string
          description: URL of the product's thumbnail image
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the product was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the product was last updated
      required:
        - code
        - title
        - price
        - category
        - stock
      example:
        code: "P12345"
        title: "Wireless Headphones"
        description: "High-quality Bluetooth headphones."
        price: 100
        category: "Electronics"
        stock: 150
        status: true
        thumbnail: "https://example.com/images/headphones.jpg"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: tokenCookie
      description: JWT token stored in cookies for authentication.
paths:
  /api/products:
    get:
      summary: Retrieve a list of products with pagination and filtering.
      tags:
        - Products
      parameters:
        - name: category
          in: query
          description: Filter by category (case-insensitive)
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of products per page (default is 10)
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: Page number (default is 1)
          required: false
          schema:
            type: number
        - name: sort
          in: query
          description: Sorting order (asc or desc)
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Field to sort by (default is price)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  totalPages:
                    type: number
                  page:
                    type: number
                  hasPrevPage:
                    type: boolean
                  hasNextPage:
                    type: boolean
                  prevPage:
                    type: number
                    nullable: true
                  nextPage:
                    type: number
                    nullable: true
                  limit:
                    type: number
        "400":
          description: Invalid query parameters
        "500":
          description: Internal server error
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Missing required fields or invalid data
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /api/products/{id}:
    get:
      summary: Retrieve a single product by ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid product ID
        "404":
          description: Product not found
        "500":
          description: Internal server error
    put:
      summary: Update an existing product
      tags:
        - Products
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid product ID or data
        "404":
          description: Product not found
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    delete:
      summary: Delete a product by ID
      tags:
        - Products
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Producto eliminado correctamente"
        "400":
          description: Invalid product ID
        "404":
          description: Product not found
        "401":
          description: Unauthorized
        "500":
          description: Internal server error