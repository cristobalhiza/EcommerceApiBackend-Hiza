components:
  schemas:
    Product:
      type: object
      properties:
        code:
          type: string
          description: Unique code of the product, automatically generated using uuidv4() in the model.
        title:
          type: string
          description: Title of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          format: float
          description: Price of the product
        category:
          type: string
          description: Category of the product
        stock:
          type: number
          description: Stock quantity of the product
        status:
          type: boolean
          description: Status of the product (active or inactive)
        thumbnail:
          type: string
          description: URL of the product's thumbnail image
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the product was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the product was last updated
      required:
        - code
        - title
        - price
        - category
        - stock
      example:
        code: "P12345"
        title: "Wireless Headphones"
        description: "High-quality Bluetooth headphones."
        price: 100
        category: "Electronics"
        stock: 150
        status: true
        thumbnail: "https://example.com/images/headphones.jpg"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: tokenCookie
      description: JWT token stored in cookies for authentication.

  responses:
    Unauthorized:
      description: Unauthorized, authentication required.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "User not authenticated"

    BadRequest:
      description: Bad request, missing or invalid parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid request parameters"

    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"

    InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Something went wrong"

    GetProductsSuccess:
      description: List of products retrieved successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Products retrieved successfully"
              products:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              totalPages:
                type: number
              page:
                type: number
              hasPrevPage:
                type: boolean
              hasNextPage:
                type: boolean
              prevPage:
                type: number
                nullable: true
              nextPage:
                type: number
                nullable: true
              limit:
                type: number

    GetProductSuccess:
      description: Product retrieved successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Product retrieved successfully"
              product:
                $ref: '#/components/schemas/Product'

    CreateProductSuccess:
      description: Product created successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Product created successfully"
              product:
                $ref: '#/components/schemas/Product'

    UpdateProductSuccess:
      description: Product updated successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Product updated successfully"
              product:
                $ref: '#/components/schemas/Product'

    DeleteProductSuccess:
      description: Product deleted successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Product deleted successfully"

paths:
  /api/products:
    get:
      summary: Retrieve a list of products with pagination and filtering.
      tags:
        - Products
      parameters:
        - name: category
          in: query
          description: Filter by category (case-insensitive)
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of products per page (default is 10)
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: Page number (default is 1)
          required: false
          schema:
            type: number
        - name: sort
          in: query
          description: Sorting order (asc or desc)
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Field to sort by (default is price)
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/GetProductsSuccess'
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new product.
      tags:
        - Products
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "201":
          $ref: '#/components/responses/CreateProductSuccess'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/products/{id}:
    get:
      summary: Retrieve a single product by ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/GetProductSuccess'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update an existing product.
      tags:
        - Products
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        "200":
          $ref: '#/components/responses/UpdateProductSuccess'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a product by ID.
      tags:
        - Products
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/DeleteProductSuccess'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'